<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:wm-ss-api="http://www.mulesoft.org/schema/mule/wm-ss-api" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd   http://www.mulesoft.org/schema/mule/wm-ss-api http://www.mulesoft.org/schema/mule/wm-ss-api/current/mule-wm-ss-api.xsd">
 <http:listener-config name="shipping-httpListenerConfig">
  <http:listener-connection host="0.0.0.0" port="8081"></http:listener-connection>
 </http:listener-config>
 <apikit:config api="resource::5733abe5-08b6-4bb3-a0ae-fd462d88c02a:shipping:1.1.0:oas:zip:shipping.yaml" httpStatusVarName="httpStatus" name="shipping-config" outboundHeadersMapName="outboundHeaders"></apikit:config>
 <wm-ss-api:config doc:name="WM SS API Config" name="wm-ss-api-config" property_basePath="/api" property_host="wms-sapi.jp-e1.cloudhub.io" property_port="80" property_protocol="HTTP">
  <wm-ss-api:connection></wm-ss-api:connection>
 </wm-ss-api:config>
 <flow name="shipping-main">
  <http:listener config-ref="shipping-httpListenerConfig" path="/api/*">
   <http:response statusCode="#[vars.httpStatus default 200]">
    <http:headers>#[vars.outboundHeaders default {}]</http:headers>
   </http:response>
   <http:error-response statusCode="#[vars.httpStatus default 500]">
    <http:body>#[payload]</http:body>
    <http:headers>#[vars.outboundHeaders default {}]</http:headers>
   </http:error-response>
  </http:listener>
  <apikit:router config-ref="shipping-config"></apikit:router>
  <error-handler>
   <on-error-propagate type="APIKIT:BAD_REQUEST">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">400</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
   <on-error-propagate type="APIKIT:NOT_FOUND">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">404</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
   <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">405</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
   <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">406</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
   <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">415</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
   <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">501</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
  </error-handler>
 </flow>
 <flow name="shipping-console">
  <http:listener config-ref="shipping-httpListenerConfig" path="/console/*">
   <http:response statusCode="#[vars.httpStatus default 200]">
    <http:headers>#[vars.outboundHeaders default {}]</http:headers>
   </http:response>
   <http:error-response statusCode="#[vars.httpStatus default 500]">
    <http:body>#[payload]</http:body>
    <http:headers>#[vars.outboundHeaders default {}]</http:headers>
   </http:error-response>
  </http:listener>
  <apikit:console config-ref="shipping-config"></apikit:console>
  <error-handler>
   <on-error-propagate type="APIKIT:NOT_FOUND">
    <ee:transform doc:name="Transform Message">
     <ee:message>
      <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
     </ee:message>
     <ee:variables>
      <ee:set-variable variableName="httpStatus">404</ee:set-variable>
     </ee:variables>
    </ee:transform>
   </on-error-propagate>
  </error-handler>
 </flow>
 <flow name="post:\shipping-instructions:application\json:shipping-config">
  <logger doc:name="受信ログ" level="INFO" message="出荷指示データを受信しました"></logger>
  <!-- 受信データを変数に保存 -->
  <ee:transform doc:name="受信データ保存">
   <ee:message>
    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
   </ee:message>
   <ee:variables>
    <ee:set-variable variableName="originalShippingData"><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
    <ee:set-variable variableName="receivedTimestamp"><![CDATA[%dw 2.0
output application/java
---
now()]]></ee:set-variable>
   </ee:variables>
  </ee:transform>
  <logger doc:name="データ内容ログ" level="INFO" message="受信データ: #[vars.originalShippingData]"></logger>
  <!-- 振分判定サブフローを呼び出し -->
  <flow-ref doc:name="振分判定実行" name="shipping-distribution-logic"></flow-ref>
  <logger doc:name="判定結果ログ" level="INFO" message="振分判定結果: #[vars.distributionResult]"></logger>
  <!-- 配送会社判定サブフローを呼び出し -->
  <flow-ref doc:name="配送会社判定実行" name="shipping-carrier-determination"></flow-ref>
  <logger doc:name="配送会社判定結果ログ" level="INFO" message="配送会社判定結果: #[vars.carrierResult]"></logger>
  <!-- API呼び出し用データ変換 -->
  <ee:transform doc:name="API呼び出し用データ変換">
   <ee:message>
    <ee:set-payload><![CDATA[%dw 2.0
output application/json
var originalData = vars.originalShippingData
var distributionResult = vars.distributionResult
var carrierResult = vars.carrierResult
var carrierData = 
    if (vars.yamatoData != null) vars.yamatoData
    else if (vars.sagawaData != null) vars.sagawaData
    else if (vars.japanPostData != null) vars.japanPostData
    else vars.defaultCarrierData default {}

var systemData = 
    if (vars.systemAData != null) vars.systemAData
    else if (vars.systemBData != null) vars.systemBData
    else if (vars.expressData != null) vars.expressData
    else vars.defaultData default {}

---
{
    "shipmentId": uuid(),
    "orderNumber": originalData.orderNumber,
    "companyCode": originalData.companyCode,
    "warehouseCode": originalData.warehouseCode,
    "shippingType": originalData.shippingType,
    "urgencyFlag": originalData.urgencyFlag,
    "customer": {
        "customerId": originalData.customerInfo.customerId,
        "customerName": originalData.customerInfo.customerName,
        "address": {
            "prefecture": originalData.customerInfo.address.prefecture,
            "city": originalData.customerInfo.address.city,
            "street": originalData.customerInfo.address.street,
            "postalCode": originalData.destinationPostalCode default "",
            "region": originalData.destinationRegion
        }
    },
    "items": originalData.items map (item, index) -> {
        "itemCode": item.itemCode,
        "itemName": item.itemName,
        "quantity": item.quantity,
        "unitPrice": item.unitPrice,
        "totalPrice": item.quantity * item.unitPrice
    },
    "shipping": {
        "shippingDate": originalData.shippingDate,
        "deliveryDate": originalData.deliveryDate,
        "packageWeight": originalData.packageWeight default 0,
        "packageSize": originalData.packageSize default "MEDIUM",
        "specialHandling": originalData.specialHandling default false,
        "specialInstructions": originalData.specialInstructions default ""
    },
    "distribution": {
        "distributionTarget": distributionResult.distributionTarget,
        "priority": distributionResult.priority,
        "targetSystem": systemData.targetSystem default distributionResult.distributionTarget,
        "processingInstructions": systemData.processingInstructions default {}
    },
    "carrier": {
        "carrierCode": carrierResult.carrierCode,
        "carrierName": carrierResult.carrierName,
        "estimatedDeliveryDays": carrierResult.estimatedDeliveryDays,
        "estimatedShippingCost": carrierResult.estimatedShippingCost,
        "apiEndpoint": carrierData.apiEndpoint default "",
        "authToken": carrierData.authToken default "",
        "serviceType": carrierData.serviceType default carrierResult.carrierCode,
        "trackingEnabled": carrierData.trackingEnabled default false,
        "insuranceRequired": carrierData.insuranceRequired default false,
        "signatureRequired": carrierData.signatureRequired default false,
        "cashOnDelivery": carrierData.cashOnDelivery default false
    },
    "metadata": {
        "receivedAt": vars.receivedTimestamp as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"},
        "processedAt": now() as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"},
        "version": "1.0",
        "source": "shipping-papi"
    }
}]]></ee:set-payload>
   </ee:message>
  </ee:transform>
  <logger doc:name="API呼び出しデータログ" level="INFO" message="API呼び出し用データ: #[payload]"></logger>
  <wm-ss-api:create-shipment config-ref="wm-ss-api-config" doc:id="ahpxqj" doc:name="Create shipment"></wm-ss-api:create-shipment>
  <!-- レスポンス生成 -->
  <ee:transform doc:name="レスポンス生成">
   <ee:message>
    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    "status": "success",
    "message": "出荷指示データを正常に受信し、振分判定および配送会社判定を完了しました",
    "distributionResult": vars.distributionResult,
    "carrierResult": vars.carrierResult,
    "receivedAt": vars.receivedTimestamp as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"}
}]]></ee:set-payload>
   </ee:message>
  </ee:transform>
 </flow>
 <!-- 振分判定ロジックのサブフロー -->
 <sub-flow name="shipping-distribution-logic">
  <logger doc:name="判定開始ログ" level="INFO" message="振分判定ロジックを開始します"></logger>
  <ee:transform doc:name="振分判定処理">
   <ee:message>
    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
   </ee:message>
   <ee:variables>
    <ee:set-variable variableName="distributionResult"><![CDATA[%dw 2.0
output application/json
var shippingData = vars.originalShippingData
var companyCode = shippingData.companyCode default ""
var warehouseCode = shippingData.warehouseCode default ""
var shippingType = shippingData.shippingType default ""
var urgencyFlag = shippingData.urgencyFlag default false
var destinationRegion = shippingData.destinationRegion default ""

// 振分判定ロジック
var distributionTarget = 
    if (companyCode == "A001" and warehouseCode == "WH01")
        "SYSTEM_A"
    else if (companyCode == "B001" and warehouseCode == "WH02") 
        "SYSTEM_B"
    else if (shippingType == "EXPRESS" or urgencyFlag == true)
        "EXPRESS_SYSTEM"
    else if (destinationRegion == "TOKYO" or destinationRegion == "OSAKA")
        "REGIONAL_SYSTEM_EAST"
    else if (destinationRegion == "FUKUOKA" or destinationRegion == "HIROSHIMA")
        "REGIONAL_SYSTEM_WEST"
    else
        "DEFAULT_SYSTEM"

var priority = 
    if (urgencyFlag == true or shippingType == "EXPRESS") "HIGH"
    else if (destinationRegion == "TOKYO" or destinationRegion == "OSAKA") "MEDIUM"
    else "NORMAL"

---
{
    "distributionTarget": distributionTarget,
    "priority": priority,
    "judgmentCriteria": {
        "companyCode": companyCode,
        "warehouseCode": warehouseCode,
        "shippingType": shippingType,
        "urgencyFlag": urgencyFlag,
        "destinationRegion": destinationRegion
    },
    "processedAt": now() as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"}
}]]></ee:set-variable>
   </ee:variables>
  </ee:transform>
  <logger doc:name="判定詳細ログ" level="INFO" message="振分先: #[vars.distributionResult.distributionTarget], 優先度: #[vars.distributionResult.priority]"></logger>
  <!-- 振分先に応じた追加処理のための条件分岐 -->
  <choice doc:name="振分先別処理">
   <when expression="#[vars.distributionResult.distributionTarget == 'SYSTEM_A']">
    <logger doc:name="システムA処理ログ" level="INFO" message="システムA向け処理を準備します"></logger>
    <ee:transform doc:name="システムA用データ変換">
     <ee:variables>
      <ee:set-variable variableName="systemAData"><![CDATA[%dw 2.0
output application/json
---
{
    targetSystem: "SYSTEM_A",
    originalData: vars.originalShippingData,
    processingInstructions: {
        validateInventory: true,
        checkCapacity: true,
        notifyWarehouse: true
    }
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </when>
   <when expression="#[vars.distributionResult.distributionTarget == 'SYSTEM_B']">
    <logger doc:name="システムB処理ログ" level="INFO" message="システムB向け処理を準備します"></logger>
    <ee:transform doc:name="システムB用データ変換">
     <ee:variables>
      <ee:set-variable variableName="systemBData"><![CDATA[%dw 2.0
output application/json
---
{
    targetSystem: "SYSTEM_B",
    originalData: vars.originalShippingData,
    processingInstructions: {
        autoProcess: true,
        generateLabel: true,
        updateInventory: true
    }
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </when>
   <when expression="#[vars.distributionResult.distributionTarget == 'EXPRESS_SYSTEM']">
    <logger doc:name="緊急配送処理ログ" level="INFO" message="緊急配送システム向け処理を準備します"></logger>
    <ee:transform doc:name="緊急配送用データ変換">
     <ee:variables>
      <ee:set-variable variableName="expressData"><![CDATA[%dw 2.0
output application/json
---
{
    targetSystem: "EXPRESS_SYSTEM",
    originalData: vars.originalShippingData,
    processingInstructions: {
        priority: "URGENT",
        immediateProcess: true,
        notifyManager: true,
        trackingRequired: true
    }
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </when>
   <otherwise>
    <logger doc:name="デフォルト処理ログ" level="INFO" message="デフォルトシステム向け処理を準備します"></logger>
    <ee:transform doc:name="デフォルト用データ変換">
     <ee:variables>
      <ee:set-variable variableName="defaultData"><![CDATA[%dw 2.0
output application/json
---
{
    targetSystem: vars.distributionResult.distributionTarget,
    originalData: vars.originalShippingData,
    processingInstructions: {
        standardProcess: true,
        batchProcess: true
    }
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </otherwise>
  </choice>
  <logger doc:name="判定完了ログ" level="INFO" message="振分判定ロジックが完了しました"></logger>
 </sub-flow>
 <!-- 配送会社判定ロジックのサブフロー -->
 <sub-flow name="shipping-carrier-determination">
  <logger doc:name="配送会社判定開始ログ" level="INFO" message="配送会社判定ロジックを開始します"></logger>
  <ee:transform doc:name="配送会社判定処理">
   <ee:message>
    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
   </ee:message>
   <ee:variables>
    <ee:set-variable variableName="carrierResult"><![CDATA[%dw 2.0
output application/json
var shippingData = vars.originalShippingData
var destinationPostalCode = shippingData.destinationPostalCode default ""
var destinationRegion = shippingData.destinationRegion default ""
var packageWeight = shippingData.packageWeight default 0
var packageSize = shippingData.packageSize default ""
var shippingType = shippingData.shippingType default ""
var urgencyFlag = shippingData.urgencyFlag default false
var deliveryDate = shippingData.deliveryDate default ""
var specialHandling = shippingData.specialHandling default false

// 配送会社判定ロジック（ESB配送会社判定仕様に基づく）
var carrierCode = 
    // 緊急配送の場合
    if (urgencyFlag == true or shippingType == "EXPRESS")
        "YAMATO_EXPRESS"
    // 重量・サイズによる判定
    else if (packageWeight > 30 or packageSize == "LARGE")
        "SAGAWA_FREIGHT"
    // 地域による判定
    else if (destinationRegion == "HOKKAIDO" or destinationRegion == "OKINAWA")
        "JAPAN_POST"
    // 特殊取扱いが必要な場合
    else if (specialHandling == true)
        "YAMATO_COOL"
    // 郵便番号による判定（東京・大阪エリア）
    else if ((destinationPostalCode startsWith "100") or (destinationPostalCode startsWith "530"))
        "YAMATO_STANDARD"
    // 郵便番号による判定（その他主要都市）
    else if ((destinationPostalCode startsWith "460") or (destinationPostalCode startsWith "810"))
        "SAGAWA_STANDARD"
    // デフォルト
    else
        "JAPAN_POST_STANDARD"

var carrierName = 
    if (carrierCode == "YAMATO_EXPRESS") "ヤマト運輸（宅急便）"
    else if (carrierCode == "YAMATO_STANDARD") "ヤマト運輸（通常便）"
    else if (carrierCode == "YAMATO_COOL") "ヤマト運輸（クール便）"
    else if (carrierCode == "SAGAWA_FREIGHT") "佐川急便（飛脚便）"
    else if (carrierCode == "SAGAWA_STANDARD") "佐川急便（標準便）"
    else if (carrierCode == "JAPAN_POST") "日本郵便（ゆうパック）"
    else if (carrierCode == "JAPAN_POST_STANDARD") "日本郵便（標準便）"
    else "未定義配送会社"

var estimatedDeliveryDays = 
    if (carrierCode == "YAMATO_EXPRESS") 1
    else if (carrierCode contains "YAMATO") 2
    else if (carrierCode contains "SAGAWA") 3
    else if (carrierCode contains "JAPAN_POST") 4
    else 5

var shippingCost = 
    if (carrierCode == "YAMATO_EXPRESS") (packageWeight * 200 + 800)
    else if (carrierCode == "YAMATO_COOL") (packageWeight * 180 + 600)
    else if (carrierCode == "YAMATO_STANDARD") (packageWeight * 150 + 500)
    else if (carrierCode == "SAGAWA_FREIGHT") (packageWeight * 120 + 400)
    else if (carrierCode == "SAGAWA_STANDARD") (packageWeight * 100 + 350)
    else if (carrierCode contains "JAPAN_POST") (packageWeight * 80 + 300)
    else 500

---
{
    "carrierCode": carrierCode,
    "carrierName": carrierName,
    "estimatedDeliveryDays": estimatedDeliveryDays,
    "estimatedShippingCost": shippingCost,
    "judgmentCriteria": {
        "destinationPostalCode": destinationPostalCode,
        "destinationRegion": destinationRegion,
        "packageWeight": packageWeight,
        "packageSize": packageSize,
        "shippingType": shippingType,
        "urgencyFlag": urgencyFlag,
        "specialHandling": specialHandling
    },
    "processedAt": now() as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"}
}]]></ee:set-variable>
   </ee:variables>
  </ee:transform>
  <logger doc:name="配送会社判定詳細ログ" level="INFO" message="配送会社: #[vars.carrierResult.carrierName], 配送日数: #[vars.carrierResult.estimatedDeliveryDays]日, 配送料金: #[vars.carrierResult.estimatedShippingCost]円"></logger>
  <!-- 配送会社別の追加処理 -->
  <choice doc:name="配送会社別処理">
   <when expression="#[vars.carrierResult.carrierCode contains 'YAMATO']">
    <logger doc:name="ヤマト運輸処理ログ" level="INFO" message="ヤマト運輸向け処理を準備します"></logger>
    <ee:transform doc:name="ヤマト運輸用データ変換">
     <ee:variables>
      <ee:set-variable variableName="yamatoData"><![CDATA[%dw 2.0
output application/json
---
{
    carrier: "YAMATO",
    apiEndpoint: "https://api.yamato.co.jp/shipping",
    authToken: "yamato_api_token",
    serviceType: vars.carrierResult.carrierCode,
    trackingEnabled: true,
    insuranceRequired: vars.carrierResult.estimatedShippingCost > 10000
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </when>
   <when expression="#[vars.carrierResult.carrierCode contains 'SAGAWA']">
    <logger doc:name="佐川急便処理ログ" level="INFO" message="佐川急便向け処理を準備します"></logger>
    <ee:transform doc:name="佐川急便用データ変換">
     <ee:variables>
      <ee:set-variable variableName="sagawaData"><![CDATA[%dw 2.0
output application/json
---
{
    carrier: "SAGAWA",
    apiEndpoint: "https://api.sagawa-exp.co.jp/shipping",
    authToken: "sagawa_api_token",
    serviceType: vars.carrierResult.carrierCode,
    trackingEnabled: true,
    signatureRequired: vars.originalShippingData.packageWeight > 20
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </when>
   <when expression="#[vars.carrierResult.carrierCode contains 'JAPAN_POST']">
    <logger doc:name="日本郵便処理ログ" level="INFO" message="日本郵便向け処理を準備します"></logger>
    <ee:transform doc:name="日本郵便用データ変換">
     <ee:variables>
      <ee:set-variable variableName="japanPostData"><![CDATA[%dw 2.0
output application/json
---
{
    carrier: "JAPAN_POST",
    apiEndpoint: "https://api.post.japanpost.jp/shipping",
    authToken: "japanpost_api_token",
    serviceType: vars.carrierResult.carrierCode,
    trackingEnabled: false,
    cashOnDelivery: vars.originalShippingData.paymentMethod == "COD"
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </when>
   <otherwise>
    <logger doc:name="デフォルト配送会社処理ログ" level="INFO" message="デフォルト配送会社処理を準備します"></logger>
    <ee:transform doc:name="デフォルト配送会社用データ変換">
     <ee:variables>
      <ee:set-variable variableName="defaultCarrierData"><![CDATA[%dw 2.0
output application/json
---
{
    carrier: "DEFAULT",
    serviceType: vars.carrierResult.carrierCode,
    manualProcessRequired: true
}]]></ee:set-variable>
     </ee:variables>
    </ee:transform>
   </otherwise>
  </choice>
  <logger doc:name="配送会社判定完了ログ" level="INFO" message="配送会社判定ロジックが完了しました"></logger>
 </sub-flow>
</mule>
